# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tracking_pid/PidDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class PidDebug(genpy.Message):
  _md5sum = "9e084788031037458fcbdc7432057e27"
  _type = "tracking_pid/PidDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Twist error
geometry_msgs/Twist proportional
geometry_msgs/Twist integral
geometry_msgs/Twist derivative
geometry_msgs/Twist feedforward
geometry_msgs/Twist raw_error
float32 scale_long_control

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['error','proportional','integral','derivative','feedforward','raw_error','scale_long_control']
  _slot_types = ['geometry_msgs/Twist','geometry_msgs/Twist','geometry_msgs/Twist','geometry_msgs/Twist','geometry_msgs/Twist','geometry_msgs/Twist','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error,proportional,integral,derivative,feedforward,raw_error,scale_long_control

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PidDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.error is None:
        self.error = geometry_msgs.msg.Twist()
      if self.proportional is None:
        self.proportional = geometry_msgs.msg.Twist()
      if self.integral is None:
        self.integral = geometry_msgs.msg.Twist()
      if self.derivative is None:
        self.derivative = geometry_msgs.msg.Twist()
      if self.feedforward is None:
        self.feedforward = geometry_msgs.msg.Twist()
      if self.raw_error is None:
        self.raw_error = geometry_msgs.msg.Twist()
      if self.scale_long_control is None:
        self.scale_long_control = 0.
    else:
      self.error = geometry_msgs.msg.Twist()
      self.proportional = geometry_msgs.msg.Twist()
      self.integral = geometry_msgs.msg.Twist()
      self.derivative = geometry_msgs.msg.Twist()
      self.feedforward = geometry_msgs.msg.Twist()
      self.raw_error = geometry_msgs.msg.Twist()
      self.scale_long_control = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_36df().pack(_x.error.linear.x, _x.error.linear.y, _x.error.linear.z, _x.error.angular.x, _x.error.angular.y, _x.error.angular.z, _x.proportional.linear.x, _x.proportional.linear.y, _x.proportional.linear.z, _x.proportional.angular.x, _x.proportional.angular.y, _x.proportional.angular.z, _x.integral.linear.x, _x.integral.linear.y, _x.integral.linear.z, _x.integral.angular.x, _x.integral.angular.y, _x.integral.angular.z, _x.derivative.linear.x, _x.derivative.linear.y, _x.derivative.linear.z, _x.derivative.angular.x, _x.derivative.angular.y, _x.derivative.angular.z, _x.feedforward.linear.x, _x.feedforward.linear.y, _x.feedforward.linear.z, _x.feedforward.angular.x, _x.feedforward.angular.y, _x.feedforward.angular.z, _x.raw_error.linear.x, _x.raw_error.linear.y, _x.raw_error.linear.z, _x.raw_error.angular.x, _x.raw_error.angular.y, _x.raw_error.angular.z, _x.scale_long_control))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.error is None:
        self.error = geometry_msgs.msg.Twist()
      if self.proportional is None:
        self.proportional = geometry_msgs.msg.Twist()
      if self.integral is None:
        self.integral = geometry_msgs.msg.Twist()
      if self.derivative is None:
        self.derivative = geometry_msgs.msg.Twist()
      if self.feedforward is None:
        self.feedforward = geometry_msgs.msg.Twist()
      if self.raw_error is None:
        self.raw_error = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 292
      (_x.error.linear.x, _x.error.linear.y, _x.error.linear.z, _x.error.angular.x, _x.error.angular.y, _x.error.angular.z, _x.proportional.linear.x, _x.proportional.linear.y, _x.proportional.linear.z, _x.proportional.angular.x, _x.proportional.angular.y, _x.proportional.angular.z, _x.integral.linear.x, _x.integral.linear.y, _x.integral.linear.z, _x.integral.angular.x, _x.integral.angular.y, _x.integral.angular.z, _x.derivative.linear.x, _x.derivative.linear.y, _x.derivative.linear.z, _x.derivative.angular.x, _x.derivative.angular.y, _x.derivative.angular.z, _x.feedforward.linear.x, _x.feedforward.linear.y, _x.feedforward.linear.z, _x.feedforward.angular.x, _x.feedforward.angular.y, _x.feedforward.angular.z, _x.raw_error.linear.x, _x.raw_error.linear.y, _x.raw_error.linear.z, _x.raw_error.angular.x, _x.raw_error.angular.y, _x.raw_error.angular.z, _x.scale_long_control,) = _get_struct_36df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_36df().pack(_x.error.linear.x, _x.error.linear.y, _x.error.linear.z, _x.error.angular.x, _x.error.angular.y, _x.error.angular.z, _x.proportional.linear.x, _x.proportional.linear.y, _x.proportional.linear.z, _x.proportional.angular.x, _x.proportional.angular.y, _x.proportional.angular.z, _x.integral.linear.x, _x.integral.linear.y, _x.integral.linear.z, _x.integral.angular.x, _x.integral.angular.y, _x.integral.angular.z, _x.derivative.linear.x, _x.derivative.linear.y, _x.derivative.linear.z, _x.derivative.angular.x, _x.derivative.angular.y, _x.derivative.angular.z, _x.feedforward.linear.x, _x.feedforward.linear.y, _x.feedforward.linear.z, _x.feedforward.angular.x, _x.feedforward.angular.y, _x.feedforward.angular.z, _x.raw_error.linear.x, _x.raw_error.linear.y, _x.raw_error.linear.z, _x.raw_error.angular.x, _x.raw_error.angular.y, _x.raw_error.angular.z, _x.scale_long_control))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.error is None:
        self.error = geometry_msgs.msg.Twist()
      if self.proportional is None:
        self.proportional = geometry_msgs.msg.Twist()
      if self.integral is None:
        self.integral = geometry_msgs.msg.Twist()
      if self.derivative is None:
        self.derivative = geometry_msgs.msg.Twist()
      if self.feedforward is None:
        self.feedforward = geometry_msgs.msg.Twist()
      if self.raw_error is None:
        self.raw_error = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 292
      (_x.error.linear.x, _x.error.linear.y, _x.error.linear.z, _x.error.angular.x, _x.error.angular.y, _x.error.angular.z, _x.proportional.linear.x, _x.proportional.linear.y, _x.proportional.linear.z, _x.proportional.angular.x, _x.proportional.angular.y, _x.proportional.angular.z, _x.integral.linear.x, _x.integral.linear.y, _x.integral.linear.z, _x.integral.angular.x, _x.integral.angular.y, _x.integral.angular.z, _x.derivative.linear.x, _x.derivative.linear.y, _x.derivative.linear.z, _x.derivative.angular.x, _x.derivative.angular.y, _x.derivative.angular.z, _x.feedforward.linear.x, _x.feedforward.linear.y, _x.feedforward.linear.z, _x.feedforward.angular.x, _x.feedforward.angular.y, _x.feedforward.angular.z, _x.raw_error.linear.x, _x.raw_error.linear.y, _x.raw_error.linear.z, _x.raw_error.angular.x, _x.raw_error.angular.y, _x.raw_error.angular.z, _x.scale_long_control,) = _get_struct_36df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36df = None
def _get_struct_36df():
    global _struct_36df
    if _struct_36df is None:
        _struct_36df = struct.Struct("<36df")
    return _struct_36df
