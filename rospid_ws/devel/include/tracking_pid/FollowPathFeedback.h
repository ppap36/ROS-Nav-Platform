// Generated by gencpp from file tracking_pid/FollowPathFeedback.msg
// DO NOT EDIT!


#ifndef TRACKING_PID_MESSAGE_FOLLOWPATHFEEDBACK_H
#define TRACKING_PID_MESSAGE_FOLLOWPATHFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tracking_pid
{
template <class ContainerAllocator>
struct FollowPathFeedback_
{
  typedef FollowPathFeedback_<ContainerAllocator> Type;

  FollowPathFeedback_()
    : progress(0.0)  {
    }
  FollowPathFeedback_(const ContainerAllocator& _alloc)
    : progress(0.0)  {
  (void)_alloc;
    }



   typedef float _progress_type;
  _progress_type progress;





  typedef boost::shared_ptr< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct FollowPathFeedback_

typedef ::tracking_pid::FollowPathFeedback_<std::allocator<void> > FollowPathFeedback;

typedef boost::shared_ptr< ::tracking_pid::FollowPathFeedback > FollowPathFeedbackPtr;
typedef boost::shared_ptr< ::tracking_pid::FollowPathFeedback const> FollowPathFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tracking_pid::FollowPathFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tracking_pid::FollowPathFeedback_<ContainerAllocator1> & lhs, const ::tracking_pid::FollowPathFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.progress == rhs.progress;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tracking_pid::FollowPathFeedback_<ContainerAllocator1> & lhs, const ::tracking_pid::FollowPathFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tracking_pid

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70805092fd20e110765c7b79e8efb737";
  }

  static const char* value(const ::tracking_pid::FollowPathFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70805092fd20e110ULL;
  static const uint64_t static_value2 = 0x765c7b79e8efb737ULL;
};

template<class ContainerAllocator>
struct DataType< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tracking_pid/FollowPathFeedback";
  }

  static const char* value(const ::tracking_pid::FollowPathFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"float32 progress\n"
;
  }

  static const char* value(const ::tracking_pid::FollowPathFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.progress);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FollowPathFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tracking_pid::FollowPathFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tracking_pid::FollowPathFeedback_<ContainerAllocator>& v)
  {
    s << indent << "progress: ";
    Printer<float>::stream(s, indent + "  ", v.progress);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRACKING_PID_MESSAGE_FOLLOWPATHFEEDBACK_H
